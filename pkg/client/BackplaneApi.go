// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for JobStatusStatus.
const (
	JobStatusStatusFailed    JobStatusStatus = "Failed"
	JobStatusStatusKilled    JobStatusStatus = "Killed"
	JobStatusStatusPending   JobStatusStatus = "Pending"
	JobStatusStatusRunning   JobStatusStatus = "Running"
	JobStatusStatusSucceeded JobStatusStatus = "Succeeded"
	JobStatusStatusUnknown   JobStatusStatus = "Unknown"
)

// Defines values for ScriptLanguage.
const (
	ScriptLanguageBash   ScriptLanguage = "bash"
	ScriptLanguagePython ScriptLanguage = "python"
)

// Defines values for ScriptMetadataLanguage.
const (
	ScriptMetadataLanguageBash   ScriptMetadataLanguage = "bash"
	ScriptMetadataLanguagePython ScriptMetadataLanguage = "python"
)

// Defines values for TestJobResultStatus.
const (
	TestJobResultStatusFailed    TestJobResultStatus = "Failed"
	TestJobResultStatusPending   TestJobResultStatus = "Pending"
	TestJobResultStatusRunning   TestJobResultStatus = "Running"
	TestJobResultStatusSucceeded TestJobResultStatus = "Succeeded"
)

// AssumableRole Roles and there corresponding ARN
type AssumableRole struct {
	// Arn ARN for the assumable role
	Arn string `json:"arn"`

	// Name Human readable
	Name string `json:"name"`
}

// AssumeRoleSequenceResponse Response for assume role handler
type AssumeRoleSequenceResponse struct {
	// AssumptionSequence Role ARNs to assume in order
	AssumptionSequence []AssumableRole `json:"assumptionSequence"`
}

// CloudCredentialsResponse Response for cloud handler
type CloudCredentialsResponse struct {
	// ClusterID ClusterID
	ClusterID string `json:"clusterID"`

	// ConsoleLink Link to the console, optional
	ConsoleLink *string `json:"consoleLink,omitempty"`

	// Credentials Cloud credentials, optional
	Credentials *string `json:"credentials,omitempty"`

	// Region Region, optional
	Region *string `json:"region,omitempty"`
}

// CreateJob defines model for CreateJob.
type CreateJob struct {
	// CanonicalName Name of the script to run
	CanonicalName *string `json:"canonicalName,omitempty"`

	// Parameters A map of parameters for the script, must be a flat object and matches
	// the parameters declared on the metadata
	Parameters *map[string]string `json:"parameters,omitempty"`
}

// CreateReport Request body for creating a new report
type CreateReport struct {
	// Data Report content, base64 encoded
	Data string `json:"data"`

	// Summary A summary name for the report
	Summary string `json:"summary"`
}

// CreateTestJob Body for creating a test job
type CreateTestJob struct {
	// BaseImageOverride Container image tag to override default managed-scripts base image during test job run.
	BaseImageOverride *string `json:"baseImageOverride,omitempty"`

	// DryRun Flag to indicate whether to generate a template or execute the script
	DryRun *bool `json:"dryRun,omitempty"`

	// Parameters A map of parameters for the script, must be a flat object and matches
	// the parameters declared on the metadata
	Parameters *map[string]string `json:"parameters,omitempty"`

	// ScriptBody Base64 encoded script body to run
	ScriptBody string `json:"scriptBody"`

	// ScriptMetadata Script metadata
	ScriptMetadata ScriptMetadata `json:"scriptMetadata"`
}

// EnvDecl defines model for EnvDecl.
type EnvDecl struct {
	// Description A description of the env var
	Description *string `json:"description,omitempty"`

	// Key Key of the env
	Key *string `json:"key,omitempty"`

	// Optional Whether this env var is optional
	Optional *bool `json:"optional,omitempty"`
}

// EnvRealised defines model for EnvRealised.
type EnvRealised struct {
	// Key Key of the env
	Key *string `json:"key,omitempty"`

	// Value The processed value of the env var
	Value *string `json:"value,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Message Error Message
	Message *string `json:"message,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int `json:"statusCode,omitempty"`
}

// Job defines model for Job.
type Job struct {
	// JobId An unique id to identify this job run
	JobId     *string    `json:"jobId,omitempty"`
	JobStatus *JobStatus `json:"jobStatus,omitempty"`

	// Message A helpful message to the user
	Message *string `json:"message,omitempty"`

	// UserMD5 MD5 of the user who created the job
	UserMD5 *string `json:"userMD5,omitempty"`
}

// JobStatus defines model for JobStatus.
type JobStatus struct {
	// End End/Finish time of the script
	End *time.Time `json:"end"`

	// Envs A array of environment parameters for the script
	Envs *[]EnvRealised `json:"envs,omitempty"`

	// Namespace Namespace of the script being ran
	Namespace *string `json:"namespace,omitempty"`
	Script    *Script `json:"script,omitempty"`

	// Start Start time of the script
	Start *time.Time `json:"start,omitempty"`

	// Status status of the script
	Status *JobStatusStatus `json:"status,omitempty"`
}

// JobStatusStatus status of the script
type JobStatusStatus string

// LabelDecl defines model for LabelDecl.
type LabelDecl struct {
	// Description A brief description of the label
	Description *string `json:"description,omitempty"`

	// Key Key of the label
	Key *string `json:"key,omitempty"`

	// Values Values for the label
	Values *[]interface{} `json:"values,omitempty"`
}

// ListReports A list of reports for a cluster
type ListReports struct {
	// ClusterId The cluster internal UUID
	ClusterId *string `json:"clusterId,omitempty"`
	Reports   *[]struct {
		// CreatedAt When the report was generated
		CreatedAt *time.Time `json:"created_at,omitempty"`

		// ReportId Unique identifier for the report
		ReportId *string `json:"report_id,omitempty"`

		// Summary A summary name for the report
		Summary *string `json:"summary,omitempty"`
	} `json:"reports,omitempty"`
}

// LoginResponse Login status response
type LoginResponse struct {
	// Message message
	Message *string `json:"message,omitempty"`

	// ProxyUri KubeAPI proxy URI
	ProxyUri *string `json:"proxy_uri,omitempty"`

	// StatusCode status code
	StatusCode *int `json:"statusCode,omitempty"`
}

// Logs defines model for Logs.
type Logs struct {
	// Logs Logs of the pod
	Logs *string `json:"logs,omitempty"`
}

// Metav1Status A k8s Metav1 status, which can be properlly parsed by oc/kubectl to display a message
type Metav1Status struct {
	// Code HTTP return code
	Code *int `json:"code,omitempty"`

	// Details a metav1.StatusDetails object, unused in backplane currently
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message A helpful message
	Message *string `json:"message,omitempty"`

	// Reason A reason string provided to the client
	Reason *string `json:"reason,omitempty"`

	// Status metav1.Status status string
	Status *string `json:"status,omitempty"`
}

// PolicyRule defines model for PolicyRule.
type PolicyRule struct {
	ApiGroups       *[]string `json:"apiGroups,omitempty" yaml:"apiGroups,omitempty"`
	NonResourceURLs *[]string `json:"nonResourceURLs,omitempty" yaml:"nonResourceURLs,omitempty"`
	ResourceNames   *[]string `json:"resourceNames,omitempty" yaml:"resourceNames,omitempty"`
	Resources       *[]string `json:"resources,omitempty" yaml:"resources,omitempty"`
	Verbs           *[]string `json:"verbs,omitempty" yaml:"verbs,omitempty"`
}

// RBAC RBAC declaration
type RBAC struct {
	ClusterRoleRules *[]PolicyRule   `json:"clusterRoleRules,omitempty" yaml:"clusterRoleRules,omitempty"`
	Roles            *[]RoleRbacDecl `json:"roles,omitempty" yaml:"roles,omitempty"`
}

// RemediationLoginResponse defines model for RemediationLoginResponse.
type RemediationLoginResponse struct {
	// Message message
	Message *string `json:"message,omitempty"`

	// ProxyUri KubeAPI proxy URI
	ProxyUri *string `json:"proxy_uri,omitempty"`

	// RemediationInstanceId the id of the remediation instance - used to locate the SA & RBAC created by backplane on the target cluster
	RemediationInstanceId string `json:"remediationInstanceId"`

	// StatusCode status code
	StatusCode *int `json:"statusCode,omitempty"`
}

// Report A single report for a cluster
type Report struct {
	// CreatedAt When the report was generated
	CreatedAt time.Time `json:"created_at"`

	// Data Report content, base64 encoded
	Data string `json:"data"`

	// ReportId Unique identifier for the report
	ReportId string `json:"report_id"`

	// Summary A summary name for the report
	Summary *string `json:"summary,omitempty"`
}

// RoleRbacDecl defines model for RoleRbacDecl.
type RoleRbacDecl struct {
	Namespace *string       `json:"namespace,omitempty"`
	Rules     *[]PolicyRule `json:"rules,omitempty"`
}

// Script defines model for Script.
type Script struct {
	// AllowedGroups Which groups are allowed to run this script
	AllowedGroups *[]string `json:"allowedGroups,omitempty"`

	// Author Author of the script, github username
	Author *string `json:"author,omitempty"`

	// CanonicalName Fully qualified name of the script, in the format of roleId/scriptname.
	// Must be unique, MR in-place check to enforce this
	CanonicalName *string `json:"canonicalName,omitempty"`

	// CustomerDataAccess Whether or not the script has access to customer data
	CustomerDataAccess *bool `json:"customerDataAccess,omitempty"`

	// Description A brief description of the script and what it does
	Description *string `json:"description,omitempty"`

	// Envs An array of environment variables for the script
	Envs *[]EnvDecl `json:"envs,omitempty"`

	// Labels An array of labels for the script
	Labels *[]interface{} `json:"labels,omitempty"`

	// Language The script language
	Language *ScriptLanguage `json:"language,omitempty"`

	// Path Path from the repo root to the script
	Path *string `json:"path,omitempty"`

	// Permalink Permalink to the script file on git
	Permalink *string `json:"permalink,omitempty"`

	// Rbac RBAC declaration
	Rbac *RBAC `json:"rbac,omitempty" yaml:"rbac,omitempty"`

	// ShortDescription A shorter description for tables and lists
	ShortDescription *string `json:"shortDescription,omitempty"`
}

// ScriptLanguage The script language
type ScriptLanguage string

// ScriptMetadata Script metadata
type ScriptMetadata struct {
	AllowedGroups      []string               `json:"allowedGroups"`
	Author             string                 `json:"author"`
	CustomerDataAccess bool                   `json:"customerDataAccess"`
	Description        string                 `json:"description"`
	Envs               []EnvDecl              `json:"envs"`
	File               string                 `json:"file"`
	Labels             []LabelDecl            `json:"labels"`
	Language           ScriptMetadataLanguage `json:"language"`
	Name               string                 `json:"name"`

	// Rbac RBAC declaration
	Rbac             RBAC   `json:"rbac" yaml:"rbac,omitempty"`
	ShortDescription string `json:"shortDescription"`
}

// ScriptMetadataLanguage defines model for ScriptMetadata.Language.
type ScriptMetadataLanguage string

// Scripts defines model for Scripts.
type Scripts = []Script

// TestJobResult Body of response for a test job run
type TestJobResult struct {
	Message *string `json:"message,omitempty"`

	// Status Test run status
	Status *TestJobResultStatus `json:"status,omitempty"`

	// TestId A unique id for test script run
	TestId string `json:"testId"`
}

// TestJobResultStatus Test run status
type TestJobResultStatus string

// GetReportsByClusterParams defines parameters for GetReportsByCluster.
type GetReportsByClusterParams struct {
	Last *int `form:"last,omitempty" json:"last,omitempty"`
}

// DeleteRemediationParams defines parameters for DeleteRemediation.
type DeleteRemediationParams struct {
	// RemediationInstanceId the id of the remediation instance previously instantiated by backplane
	RemediationInstanceId string `form:"remediationInstanceId" json:"remediationInstanceId"`
}

// CreateRemediationParams defines parameters for CreateRemediation.
type CreateRemediationParams struct {
	// RemediationName The name of a remediation which must be instantiated
	RemediationName string `form:"remediationName" json:"remediationName"`
}

// GetScriptsByClusterParams defines parameters for GetScriptsByCluster.
type GetScriptsByClusterParams struct {
	Scriptname *string `form:"scriptname,omitempty" json:"scriptname,omitempty"`
}

// GetJobLogsParams defines parameters for GetJobLogs.
type GetJobLogsParams struct {
	// Version The version to return. Default is JSON, v2 is streaming
	Version *string `form:"version,omitempty" json:"version,omitempty"`

	// Follow Specify if the logs should be followed.
	Follow *bool `form:"follow,omitempty" json:"follow,omitempty"`
}

// GetTestScriptRunLogsParams defines parameters for GetTestScriptRunLogs.
type GetTestScriptRunLogsParams struct {
	// Version The version to return. Default is JSON, v2 is streaming
	Version *string `form:"version,omitempty" json:"version,omitempty"`

	// Follow Specify if the logs should be followed.
	Follow *bool `form:"follow,omitempty" json:"follow,omitempty"`
}

// CreateReportJSONRequestBody defines body for CreateReport for application/json ContentType.
type CreateReportJSONRequestBody = CreateReport

// CreateJobJSONRequestBody defines body for CreateJob for application/json ContentType.
type CreateJobJSONRequestBody = CreateJob

// CreateTestScriptRunJSONRequestBody defines body for CreateTestScriptRun for application/json ContentType.
type CreateTestScriptRunJSONRequestBody = CreateTestJob

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCloudConsole request
	GetCloudConsole(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssumeRoleSequence request
	GetAssumeRoleSequence(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudCredentials request
	GetCloudCredentials(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBackplaneClusterClusterId request
	DeleteBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackplaneClusterClusterId request
	GetBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadBackplaneClusterClusterId request
	HeadBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsBackplaneClusterClusterId request
	OptionsBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchBackplaneClusterClusterId request
	PatchBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBackplaneClusterClusterId request
	PostBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBackplaneClusterClusterId request
	PutBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TraceBackplaneClusterClusterId request
	TraceBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReportsByCluster request
	GetReportsByCluster(ctx context.Context, clusterId string, params *GetReportsByClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateReportWithBody request with any body
	CreateReportWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateReport(ctx context.Context, clusterId string, body CreateReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReportById request
	GetReportById(ctx context.Context, clusterId string, reportId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginCluster request
	LoginCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBackplaneRemediateClusterIdRemediation request
	DeleteBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackplaneRemediateClusterIdRemediation request
	GetBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadBackplaneRemediateClusterIdRemediation request
	HeadBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsBackplaneRemediateClusterIdRemediation request
	OptionsBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchBackplaneRemediateClusterIdRemediation request
	PatchBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBackplaneRemediateClusterIdRemediation request
	PostBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBackplaneRemediateClusterIdRemediation request
	PutBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TraceBackplaneRemediateClusterIdRemediation request
	TraceBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRemediation request
	DeleteRemediation(ctx context.Context, clusterId string, params *DeleteRemediationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRemediation request
	CreateRemediation(ctx context.Context, clusterId string, params *CreateRemediationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScriptsByCluster request
	GetScriptsByCluster(ctx context.Context, clusterId string, params *GetScriptsByClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllScriptsByCluster request
	GetAllScriptsByCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllJobs request
	GetAllJobs(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateJobWithBody request with any body
	CreateJobWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateJob(ctx context.Context, clusterId string, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJob request
	DeleteJob(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRun request
	GetRun(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobLogs request
	GetJobLogs(ctx context.Context, clusterId string, jobId string, params *GetJobLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTestScriptRunWithBody request with any body
	CreateTestScriptRunWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTestScriptRun(ctx context.Context, clusterId string, body CreateTestScriptRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTestScriptRun request
	GetTestScriptRun(ctx context.Context, clusterId string, testId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTestScriptRunLogs request
	GetTestScriptRunLogs(ctx context.Context, clusterId string, testId string, params *GetTestScriptRunLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCloudConsole(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudConsoleRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssumeRoleSequence(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssumeRoleSequenceRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudCredentials(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudCredentialsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TraceBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTraceBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportsByCluster(ctx context.Context, clusterId string, params *GetReportsByClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportsByClusterRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReportWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReportRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReport(ctx context.Context, clusterId string, body CreateReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReportRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportById(ctx context.Context, clusterId string, reportId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportByIdRequest(c.Server, clusterId, reportId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBackplaneRemediateClusterIdRemediationRequest(c.Server, clusterId, remediation)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackplaneRemediateClusterIdRemediationRequest(c.Server, clusterId, remediation)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadBackplaneRemediateClusterIdRemediationRequest(c.Server, clusterId, remediation)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsBackplaneRemediateClusterIdRemediationRequest(c.Server, clusterId, remediation)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBackplaneRemediateClusterIdRemediationRequest(c.Server, clusterId, remediation)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackplaneRemediateClusterIdRemediationRequest(c.Server, clusterId, remediation)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBackplaneRemediateClusterIdRemediationRequest(c.Server, clusterId, remediation)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TraceBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTraceBackplaneRemediateClusterIdRemediationRequest(c.Server, clusterId, remediation)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRemediation(ctx context.Context, clusterId string, params *DeleteRemediationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRemediationRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRemediation(ctx context.Context, clusterId string, params *CreateRemediationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRemediationRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScriptsByCluster(ctx context.Context, clusterId string, params *GetScriptsByClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScriptsByClusterRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllScriptsByCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllScriptsByClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllJobs(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllJobsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJobWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJobRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJob(ctx context.Context, clusterId string, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJobRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJob(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJobRequest(c.Server, clusterId, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRun(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunRequest(c.Server, clusterId, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobLogs(ctx context.Context, clusterId string, jobId string, params *GetJobLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobLogsRequest(c.Server, clusterId, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTestScriptRunWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTestScriptRunRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTestScriptRun(ctx context.Context, clusterId string, body CreateTestScriptRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTestScriptRunRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTestScriptRun(ctx context.Context, clusterId string, testId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTestScriptRunRequest(c.Server, clusterId, testId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTestScriptRunLogs(ctx context.Context, clusterId string, testId string, params *GetTestScriptRunLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTestScriptRunLogsRequest(c.Server, clusterId, testId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCloudConsoleRequest generates requests for GetCloudConsole
func NewGetCloudConsoleRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cloud/console/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssumeRoleSequenceRequest generates requests for GetAssumeRoleSequence
func NewGetAssumeRoleSequenceRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cloud/credentials/assume-role-sequence/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCloudCredentialsRequest generates requests for GetCloudCredentials
func NewGetCloudCredentialsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cloud/credentials/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteBackplaneClusterClusterIdRequest generates requests for DeleteBackplaneClusterClusterId
func NewDeleteBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBackplaneClusterClusterIdRequest generates requests for GetBackplaneClusterClusterId
func NewGetBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadBackplaneClusterClusterIdRequest generates requests for HeadBackplaneClusterClusterId
func NewHeadBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsBackplaneClusterClusterIdRequest generates requests for OptionsBackplaneClusterClusterId
func NewOptionsBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchBackplaneClusterClusterIdRequest generates requests for PatchBackplaneClusterClusterId
func NewPatchBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBackplaneClusterClusterIdRequest generates requests for PostBackplaneClusterClusterId
func NewPostBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBackplaneClusterClusterIdRequest generates requests for PutBackplaneClusterClusterId
func NewPutBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTraceBackplaneClusterClusterIdRequest generates requests for TraceBackplaneClusterClusterId
func NewTraceBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReportsByClusterRequest generates requests for GetReportsByCluster
func NewGetReportsByClusterRequest(server string, clusterId string, params *GetReportsByClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/reports", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Last != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last", runtime.ParamLocationQuery, *params.Last); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateReportRequest calls the generic CreateReport builder with application/json body
func NewCreateReportRequest(server string, clusterId string, body CreateReportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateReportRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewCreateReportRequestWithBody generates requests for CreateReport with any type of body
func NewCreateReportRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/reports", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReportByIdRequest generates requests for GetReportById
func NewGetReportByIdRequest(server string, clusterId string, reportId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "report_id", runtime.ParamLocationPath, reportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/reports/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoginClusterRequest generates requests for LoginCluster
func NewLoginClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/login/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteBackplaneRemediateClusterIdRemediationRequest generates requests for DeleteBackplaneRemediateClusterIdRemediation
func NewDeleteBackplaneRemediateClusterIdRemediationRequest(server string, clusterId string, remediation string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "remediation", runtime.ParamLocationPath, remediation)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/remediate/%s/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBackplaneRemediateClusterIdRemediationRequest generates requests for GetBackplaneRemediateClusterIdRemediation
func NewGetBackplaneRemediateClusterIdRemediationRequest(server string, clusterId string, remediation string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "remediation", runtime.ParamLocationPath, remediation)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/remediate/%s/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadBackplaneRemediateClusterIdRemediationRequest generates requests for HeadBackplaneRemediateClusterIdRemediation
func NewHeadBackplaneRemediateClusterIdRemediationRequest(server string, clusterId string, remediation string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "remediation", runtime.ParamLocationPath, remediation)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/remediate/%s/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsBackplaneRemediateClusterIdRemediationRequest generates requests for OptionsBackplaneRemediateClusterIdRemediation
func NewOptionsBackplaneRemediateClusterIdRemediationRequest(server string, clusterId string, remediation string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "remediation", runtime.ParamLocationPath, remediation)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/remediate/%s/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchBackplaneRemediateClusterIdRemediationRequest generates requests for PatchBackplaneRemediateClusterIdRemediation
func NewPatchBackplaneRemediateClusterIdRemediationRequest(server string, clusterId string, remediation string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "remediation", runtime.ParamLocationPath, remediation)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/remediate/%s/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBackplaneRemediateClusterIdRemediationRequest generates requests for PostBackplaneRemediateClusterIdRemediation
func NewPostBackplaneRemediateClusterIdRemediationRequest(server string, clusterId string, remediation string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "remediation", runtime.ParamLocationPath, remediation)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/remediate/%s/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBackplaneRemediateClusterIdRemediationRequest generates requests for PutBackplaneRemediateClusterIdRemediation
func NewPutBackplaneRemediateClusterIdRemediationRequest(server string, clusterId string, remediation string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "remediation", runtime.ParamLocationPath, remediation)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/remediate/%s/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTraceBackplaneRemediateClusterIdRemediationRequest generates requests for TraceBackplaneRemediateClusterIdRemediation
func NewTraceBackplaneRemediateClusterIdRemediationRequest(server string, clusterId string, remediation string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "remediation", runtime.ParamLocationPath, remediation)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/remediate/%s/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRemediationRequest generates requests for DeleteRemediation
func NewDeleteRemediationRequest(server string, clusterId string, params *DeleteRemediationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/remediation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remediationInstanceId", runtime.ParamLocationQuery, params.RemediationInstanceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRemediationRequest generates requests for CreateRemediation
func NewCreateRemediationRequest(server string, clusterId string, params *CreateRemediationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/remediation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remediationName", runtime.ParamLocationQuery, params.RemediationName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScriptsByClusterRequest generates requests for GetScriptsByCluster
func NewGetScriptsByClusterRequest(server string, clusterId string, params *GetScriptsByClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/script/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scriptname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptname", runtime.ParamLocationQuery, *params.Scriptname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllScriptsByClusterRequest generates requests for GetAllScriptsByCluster
func NewGetAllScriptsByClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/script/%s/all", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllJobsRequest generates requests for GetAllJobs
func NewGetAllJobsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/script/%s/job", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateJobRequest calls the generic CreateJob builder with application/json body
func NewCreateJobRequest(server string, clusterId string, body CreateJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateJobRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewCreateJobRequestWithBody generates requests for CreateJob with any type of body
func NewCreateJobRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/script/%s/job", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteJobRequest generates requests for DeleteJob
func NewDeleteJobRequest(server string, clusterId string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/script/%s/job/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRunRequest generates requests for GetRun
func NewGetRunRequest(server string, clusterId string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/script/%s/job/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobLogsRequest generates requests for GetJobLogs
func NewGetJobLogsRequest(server string, clusterId string, jobId string, params *GetJobLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/script/%s/job/%s/logs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Follow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "follow", runtime.ParamLocationQuery, *params.Follow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTestScriptRunRequest calls the generic CreateTestScriptRun builder with application/json body
func NewCreateTestScriptRunRequest(server string, clusterId string, body CreateTestScriptRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTestScriptRunRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewCreateTestScriptRunRequestWithBody generates requests for CreateTestScriptRun with any type of body
func NewCreateTestScriptRunRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/testscript/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTestScriptRunRequest generates requests for GetTestScriptRun
func NewGetTestScriptRunRequest(server string, clusterId string, testId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "testId", runtime.ParamLocationPath, testId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/testscript/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTestScriptRunLogsRequest generates requests for GetTestScriptRunLogs
func NewGetTestScriptRunLogsRequest(server string, clusterId string, testId string, params *GetTestScriptRunLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "testId", runtime.ParamLocationPath, testId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/testscript/%s/%s/logs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Follow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "follow", runtime.ParamLocationQuery, *params.Follow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCloudConsoleWithResponse request
	GetCloudConsoleWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetCloudConsoleResponse, error)

	// GetAssumeRoleSequenceWithResponse request
	GetAssumeRoleSequenceWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetAssumeRoleSequenceResponse, error)

	// GetCloudCredentialsWithResponse request
	GetCloudCredentialsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetCloudCredentialsResponse, error)

	// DeleteBackplaneClusterClusterIdWithResponse request
	DeleteBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*DeleteBackplaneClusterClusterIdResponse, error)

	// GetBackplaneClusterClusterIdWithResponse request
	GetBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetBackplaneClusterClusterIdResponse, error)

	// HeadBackplaneClusterClusterIdWithResponse request
	HeadBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*HeadBackplaneClusterClusterIdResponse, error)

	// OptionsBackplaneClusterClusterIdWithResponse request
	OptionsBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*OptionsBackplaneClusterClusterIdResponse, error)

	// PatchBackplaneClusterClusterIdWithResponse request
	PatchBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PatchBackplaneClusterClusterIdResponse, error)

	// PostBackplaneClusterClusterIdWithResponse request
	PostBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PostBackplaneClusterClusterIdResponse, error)

	// PutBackplaneClusterClusterIdWithResponse request
	PutBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PutBackplaneClusterClusterIdResponse, error)

	// TraceBackplaneClusterClusterIdWithResponse request
	TraceBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*TraceBackplaneClusterClusterIdResponse, error)

	// GetReportsByClusterWithResponse request
	GetReportsByClusterWithResponse(ctx context.Context, clusterId string, params *GetReportsByClusterParams, reqEditors ...RequestEditorFn) (*GetReportsByClusterResponse, error)

	// CreateReportWithBodyWithResponse request with any body
	CreateReportWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReportResponse, error)

	CreateReportWithResponse(ctx context.Context, clusterId string, body CreateReportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateReportResponse, error)

	// GetReportByIdWithResponse request
	GetReportByIdWithResponse(ctx context.Context, clusterId string, reportId string, reqEditors ...RequestEditorFn) (*GetReportByIdResponse, error)

	// LoginClusterWithResponse request
	LoginClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*LoginClusterResponse, error)

	// DeleteBackplaneRemediateClusterIdRemediationWithResponse request
	DeleteBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*DeleteBackplaneRemediateClusterIdRemediationResponse, error)

	// GetBackplaneRemediateClusterIdRemediationWithResponse request
	GetBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*GetBackplaneRemediateClusterIdRemediationResponse, error)

	// HeadBackplaneRemediateClusterIdRemediationWithResponse request
	HeadBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*HeadBackplaneRemediateClusterIdRemediationResponse, error)

	// OptionsBackplaneRemediateClusterIdRemediationWithResponse request
	OptionsBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*OptionsBackplaneRemediateClusterIdRemediationResponse, error)

	// PatchBackplaneRemediateClusterIdRemediationWithResponse request
	PatchBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*PatchBackplaneRemediateClusterIdRemediationResponse, error)

	// PostBackplaneRemediateClusterIdRemediationWithResponse request
	PostBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*PostBackplaneRemediateClusterIdRemediationResponse, error)

	// PutBackplaneRemediateClusterIdRemediationWithResponse request
	PutBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*PutBackplaneRemediateClusterIdRemediationResponse, error)

	// TraceBackplaneRemediateClusterIdRemediationWithResponse request
	TraceBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*TraceBackplaneRemediateClusterIdRemediationResponse, error)

	// DeleteRemediationWithResponse request
	DeleteRemediationWithResponse(ctx context.Context, clusterId string, params *DeleteRemediationParams, reqEditors ...RequestEditorFn) (*DeleteRemediationResponse, error)

	// CreateRemediationWithResponse request
	CreateRemediationWithResponse(ctx context.Context, clusterId string, params *CreateRemediationParams, reqEditors ...RequestEditorFn) (*CreateRemediationResponse, error)

	// GetScriptsByClusterWithResponse request
	GetScriptsByClusterWithResponse(ctx context.Context, clusterId string, params *GetScriptsByClusterParams, reqEditors ...RequestEditorFn) (*GetScriptsByClusterResponse, error)

	// GetAllScriptsByClusterWithResponse request
	GetAllScriptsByClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetAllScriptsByClusterResponse, error)

	// GetAllJobsWithResponse request
	GetAllJobsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetAllJobsResponse, error)

	// CreateJobWithBodyWithResponse request with any body
	CreateJobWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJobResponse, error)

	CreateJobWithResponse(ctx context.Context, clusterId string, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJobResponse, error)

	// DeleteJobWithResponse request
	DeleteJobWithResponse(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*DeleteJobResponse, error)

	// GetRunWithResponse request
	GetRunWithResponse(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*GetRunResponse, error)

	// GetJobLogsWithResponse request
	GetJobLogsWithResponse(ctx context.Context, clusterId string, jobId string, params *GetJobLogsParams, reqEditors ...RequestEditorFn) (*GetJobLogsResponse, error)

	// CreateTestScriptRunWithBodyWithResponse request with any body
	CreateTestScriptRunWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTestScriptRunResponse, error)

	CreateTestScriptRunWithResponse(ctx context.Context, clusterId string, body CreateTestScriptRunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTestScriptRunResponse, error)

	// GetTestScriptRunWithResponse request
	GetTestScriptRunWithResponse(ctx context.Context, clusterId string, testId string, reqEditors ...RequestEditorFn) (*GetTestScriptRunResponse, error)

	// GetTestScriptRunLogsWithResponse request
	GetTestScriptRunLogsWithResponse(ctx context.Context, clusterId string, testId string, params *GetTestScriptRunLogsParams, reqEditors ...RequestEditorFn) (*GetTestScriptRunLogsResponse, error)
}

type GetCloudConsoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudCredentialsResponse
}

// Status returns HTTPResponse.Status
func (r GetCloudConsoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudConsoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssumeRoleSequenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssumeRoleSequenceResponse
}

// Status returns HTTPResponse.Status
func (r GetAssumeRoleSequenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssumeRoleSequenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudCredentialsResponse
}

// Status returns HTTPResponse.Status
func (r GetCloudCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OptionsBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TraceBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TraceBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TraceBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReportsByClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListReports
}

// Status returns HTTPResponse.Status
func (r GetReportsByClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReportsByClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Report
}

// Status returns HTTPResponse.Status
func (r CreateReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReportByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Report
}

// Status returns HTTPResponse.Status
func (r GetReportByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReportByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponse
}

// Status returns HTTPResponse.Status
func (r LoginClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBackplaneRemediateClusterIdRemediationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBackplaneRemediateClusterIdRemediationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBackplaneRemediateClusterIdRemediationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackplaneRemediateClusterIdRemediationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBackplaneRemediateClusterIdRemediationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackplaneRemediateClusterIdRemediationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadBackplaneRemediateClusterIdRemediationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadBackplaneRemediateClusterIdRemediationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadBackplaneRemediateClusterIdRemediationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsBackplaneRemediateClusterIdRemediationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OptionsBackplaneRemediateClusterIdRemediationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsBackplaneRemediateClusterIdRemediationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchBackplaneRemediateClusterIdRemediationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchBackplaneRemediateClusterIdRemediationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchBackplaneRemediateClusterIdRemediationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBackplaneRemediateClusterIdRemediationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBackplaneRemediateClusterIdRemediationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBackplaneRemediateClusterIdRemediationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBackplaneRemediateClusterIdRemediationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutBackplaneRemediateClusterIdRemediationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBackplaneRemediateClusterIdRemediationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TraceBackplaneRemediateClusterIdRemediationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TraceBackplaneRemediateClusterIdRemediationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TraceBackplaneRemediateClusterIdRemediationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRemediationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRemediationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRemediationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRemediationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RemediationLoginResponse
}

// Status returns HTTPResponse.Status
func (r CreateRemediationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRemediationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScriptsByClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scripts
}

// Status returns HTTPResponse.Status
func (r GetScriptsByClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScriptsByClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllScriptsByClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scripts
}

// Status returns HTTPResponse.Status
func (r GetAllScriptsByClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllScriptsByClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Job
}

// Status returns HTTPResponse.Status
func (r GetAllJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Job
}

// Status returns HTTPResponse.Status
func (r CreateJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Job
}

// Status returns HTTPResponse.Status
func (r GetRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Logs
}

// Status returns HTTPResponse.Status
func (r GetJobLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTestScriptRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestJobResult
}

// Status returns HTTPResponse.Status
func (r CreateTestScriptRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTestScriptRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTestScriptRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestJobResult
}

// Status returns HTTPResponse.Status
func (r GetTestScriptRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTestScriptRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTestScriptRunLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Logs
}

// Status returns HTTPResponse.Status
func (r GetTestScriptRunLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTestScriptRunLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCloudConsoleWithResponse request returning *GetCloudConsoleResponse
func (c *ClientWithResponses) GetCloudConsoleWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetCloudConsoleResponse, error) {
	rsp, err := c.GetCloudConsole(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudConsoleResponse(rsp)
}

// GetAssumeRoleSequenceWithResponse request returning *GetAssumeRoleSequenceResponse
func (c *ClientWithResponses) GetAssumeRoleSequenceWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetAssumeRoleSequenceResponse, error) {
	rsp, err := c.GetAssumeRoleSequence(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssumeRoleSequenceResponse(rsp)
}

// GetCloudCredentialsWithResponse request returning *GetCloudCredentialsResponse
func (c *ClientWithResponses) GetCloudCredentialsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetCloudCredentialsResponse, error) {
	rsp, err := c.GetCloudCredentials(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudCredentialsResponse(rsp)
}

// DeleteBackplaneClusterClusterIdWithResponse request returning *DeleteBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) DeleteBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*DeleteBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.DeleteBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBackplaneClusterClusterIdResponse(rsp)
}

// GetBackplaneClusterClusterIdWithResponse request returning *GetBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) GetBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.GetBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackplaneClusterClusterIdResponse(rsp)
}

// HeadBackplaneClusterClusterIdWithResponse request returning *HeadBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) HeadBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*HeadBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.HeadBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadBackplaneClusterClusterIdResponse(rsp)
}

// OptionsBackplaneClusterClusterIdWithResponse request returning *OptionsBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) OptionsBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*OptionsBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.OptionsBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsBackplaneClusterClusterIdResponse(rsp)
}

// PatchBackplaneClusterClusterIdWithResponse request returning *PatchBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) PatchBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PatchBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.PatchBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBackplaneClusterClusterIdResponse(rsp)
}

// PostBackplaneClusterClusterIdWithResponse request returning *PostBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) PostBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PostBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.PostBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBackplaneClusterClusterIdResponse(rsp)
}

// PutBackplaneClusterClusterIdWithResponse request returning *PutBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) PutBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PutBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.PutBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBackplaneClusterClusterIdResponse(rsp)
}

// TraceBackplaneClusterClusterIdWithResponse request returning *TraceBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) TraceBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*TraceBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.TraceBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTraceBackplaneClusterClusterIdResponse(rsp)
}

// GetReportsByClusterWithResponse request returning *GetReportsByClusterResponse
func (c *ClientWithResponses) GetReportsByClusterWithResponse(ctx context.Context, clusterId string, params *GetReportsByClusterParams, reqEditors ...RequestEditorFn) (*GetReportsByClusterResponse, error) {
	rsp, err := c.GetReportsByCluster(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportsByClusterResponse(rsp)
}

// CreateReportWithBodyWithResponse request with arbitrary body returning *CreateReportResponse
func (c *ClientWithResponses) CreateReportWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReportResponse, error) {
	rsp, err := c.CreateReportWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReportResponse(rsp)
}

func (c *ClientWithResponses) CreateReportWithResponse(ctx context.Context, clusterId string, body CreateReportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateReportResponse, error) {
	rsp, err := c.CreateReport(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReportResponse(rsp)
}

// GetReportByIdWithResponse request returning *GetReportByIdResponse
func (c *ClientWithResponses) GetReportByIdWithResponse(ctx context.Context, clusterId string, reportId string, reqEditors ...RequestEditorFn) (*GetReportByIdResponse, error) {
	rsp, err := c.GetReportById(ctx, clusterId, reportId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportByIdResponse(rsp)
}

// LoginClusterWithResponse request returning *LoginClusterResponse
func (c *ClientWithResponses) LoginClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*LoginClusterResponse, error) {
	rsp, err := c.LoginCluster(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginClusterResponse(rsp)
}

// DeleteBackplaneRemediateClusterIdRemediationWithResponse request returning *DeleteBackplaneRemediateClusterIdRemediationResponse
func (c *ClientWithResponses) DeleteBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*DeleteBackplaneRemediateClusterIdRemediationResponse, error) {
	rsp, err := c.DeleteBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBackplaneRemediateClusterIdRemediationResponse(rsp)
}

// GetBackplaneRemediateClusterIdRemediationWithResponse request returning *GetBackplaneRemediateClusterIdRemediationResponse
func (c *ClientWithResponses) GetBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*GetBackplaneRemediateClusterIdRemediationResponse, error) {
	rsp, err := c.GetBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackplaneRemediateClusterIdRemediationResponse(rsp)
}

// HeadBackplaneRemediateClusterIdRemediationWithResponse request returning *HeadBackplaneRemediateClusterIdRemediationResponse
func (c *ClientWithResponses) HeadBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*HeadBackplaneRemediateClusterIdRemediationResponse, error) {
	rsp, err := c.HeadBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadBackplaneRemediateClusterIdRemediationResponse(rsp)
}

// OptionsBackplaneRemediateClusterIdRemediationWithResponse request returning *OptionsBackplaneRemediateClusterIdRemediationResponse
func (c *ClientWithResponses) OptionsBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*OptionsBackplaneRemediateClusterIdRemediationResponse, error) {
	rsp, err := c.OptionsBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsBackplaneRemediateClusterIdRemediationResponse(rsp)
}

// PatchBackplaneRemediateClusterIdRemediationWithResponse request returning *PatchBackplaneRemediateClusterIdRemediationResponse
func (c *ClientWithResponses) PatchBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*PatchBackplaneRemediateClusterIdRemediationResponse, error) {
	rsp, err := c.PatchBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBackplaneRemediateClusterIdRemediationResponse(rsp)
}

// PostBackplaneRemediateClusterIdRemediationWithResponse request returning *PostBackplaneRemediateClusterIdRemediationResponse
func (c *ClientWithResponses) PostBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*PostBackplaneRemediateClusterIdRemediationResponse, error) {
	rsp, err := c.PostBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBackplaneRemediateClusterIdRemediationResponse(rsp)
}

// PutBackplaneRemediateClusterIdRemediationWithResponse request returning *PutBackplaneRemediateClusterIdRemediationResponse
func (c *ClientWithResponses) PutBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*PutBackplaneRemediateClusterIdRemediationResponse, error) {
	rsp, err := c.PutBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBackplaneRemediateClusterIdRemediationResponse(rsp)
}

// TraceBackplaneRemediateClusterIdRemediationWithResponse request returning *TraceBackplaneRemediateClusterIdRemediationResponse
func (c *ClientWithResponses) TraceBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId string, remediation string, reqEditors ...RequestEditorFn) (*TraceBackplaneRemediateClusterIdRemediationResponse, error) {
	rsp, err := c.TraceBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTraceBackplaneRemediateClusterIdRemediationResponse(rsp)
}

// DeleteRemediationWithResponse request returning *DeleteRemediationResponse
func (c *ClientWithResponses) DeleteRemediationWithResponse(ctx context.Context, clusterId string, params *DeleteRemediationParams, reqEditors ...RequestEditorFn) (*DeleteRemediationResponse, error) {
	rsp, err := c.DeleteRemediation(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRemediationResponse(rsp)
}

// CreateRemediationWithResponse request returning *CreateRemediationResponse
func (c *ClientWithResponses) CreateRemediationWithResponse(ctx context.Context, clusterId string, params *CreateRemediationParams, reqEditors ...RequestEditorFn) (*CreateRemediationResponse, error) {
	rsp, err := c.CreateRemediation(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRemediationResponse(rsp)
}

// GetScriptsByClusterWithResponse request returning *GetScriptsByClusterResponse
func (c *ClientWithResponses) GetScriptsByClusterWithResponse(ctx context.Context, clusterId string, params *GetScriptsByClusterParams, reqEditors ...RequestEditorFn) (*GetScriptsByClusterResponse, error) {
	rsp, err := c.GetScriptsByCluster(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScriptsByClusterResponse(rsp)
}

// GetAllScriptsByClusterWithResponse request returning *GetAllScriptsByClusterResponse
func (c *ClientWithResponses) GetAllScriptsByClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetAllScriptsByClusterResponse, error) {
	rsp, err := c.GetAllScriptsByCluster(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllScriptsByClusterResponse(rsp)
}

// GetAllJobsWithResponse request returning *GetAllJobsResponse
func (c *ClientWithResponses) GetAllJobsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetAllJobsResponse, error) {
	rsp, err := c.GetAllJobs(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllJobsResponse(rsp)
}

// CreateJobWithBodyWithResponse request with arbitrary body returning *CreateJobResponse
func (c *ClientWithResponses) CreateJobWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJobResponse, error) {
	rsp, err := c.CreateJobWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJobResponse(rsp)
}

func (c *ClientWithResponses) CreateJobWithResponse(ctx context.Context, clusterId string, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJobResponse, error) {
	rsp, err := c.CreateJob(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJobResponse(rsp)
}

// DeleteJobWithResponse request returning *DeleteJobResponse
func (c *ClientWithResponses) DeleteJobWithResponse(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*DeleteJobResponse, error) {
	rsp, err := c.DeleteJob(ctx, clusterId, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJobResponse(rsp)
}

// GetRunWithResponse request returning *GetRunResponse
func (c *ClientWithResponses) GetRunWithResponse(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*GetRunResponse, error) {
	rsp, err := c.GetRun(ctx, clusterId, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunResponse(rsp)
}

// GetJobLogsWithResponse request returning *GetJobLogsResponse
func (c *ClientWithResponses) GetJobLogsWithResponse(ctx context.Context, clusterId string, jobId string, params *GetJobLogsParams, reqEditors ...RequestEditorFn) (*GetJobLogsResponse, error) {
	rsp, err := c.GetJobLogs(ctx, clusterId, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobLogsResponse(rsp)
}

// CreateTestScriptRunWithBodyWithResponse request with arbitrary body returning *CreateTestScriptRunResponse
func (c *ClientWithResponses) CreateTestScriptRunWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTestScriptRunResponse, error) {
	rsp, err := c.CreateTestScriptRunWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTestScriptRunResponse(rsp)
}

func (c *ClientWithResponses) CreateTestScriptRunWithResponse(ctx context.Context, clusterId string, body CreateTestScriptRunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTestScriptRunResponse, error) {
	rsp, err := c.CreateTestScriptRun(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTestScriptRunResponse(rsp)
}

// GetTestScriptRunWithResponse request returning *GetTestScriptRunResponse
func (c *ClientWithResponses) GetTestScriptRunWithResponse(ctx context.Context, clusterId string, testId string, reqEditors ...RequestEditorFn) (*GetTestScriptRunResponse, error) {
	rsp, err := c.GetTestScriptRun(ctx, clusterId, testId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTestScriptRunResponse(rsp)
}

// GetTestScriptRunLogsWithResponse request returning *GetTestScriptRunLogsResponse
func (c *ClientWithResponses) GetTestScriptRunLogsWithResponse(ctx context.Context, clusterId string, testId string, params *GetTestScriptRunLogsParams, reqEditors ...RequestEditorFn) (*GetTestScriptRunLogsResponse, error) {
	rsp, err := c.GetTestScriptRunLogs(ctx, clusterId, testId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTestScriptRunLogsResponse(rsp)
}

// ParseGetCloudConsoleResponse parses an HTTP response from a GetCloudConsoleWithResponse call
func ParseGetCloudConsoleResponse(rsp *http.Response) (*GetCloudConsoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCloudConsoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudCredentialsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAssumeRoleSequenceResponse parses an HTTP response from a GetAssumeRoleSequenceWithResponse call
func ParseGetAssumeRoleSequenceResponse(rsp *http.Response) (*GetAssumeRoleSequenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssumeRoleSequenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssumeRoleSequenceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCloudCredentialsResponse parses an HTTP response from a GetCloudCredentialsWithResponse call
func ParseGetCloudCredentialsResponse(rsp *http.Response) (*GetCloudCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCloudCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudCredentialsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteBackplaneClusterClusterIdResponse parses an HTTP response from a DeleteBackplaneClusterClusterIdWithResponse call
func ParseDeleteBackplaneClusterClusterIdResponse(rsp *http.Response) (*DeleteBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBackplaneClusterClusterIdResponse parses an HTTP response from a GetBackplaneClusterClusterIdWithResponse call
func ParseGetBackplaneClusterClusterIdResponse(rsp *http.Response) (*GetBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseHeadBackplaneClusterClusterIdResponse parses an HTTP response from a HeadBackplaneClusterClusterIdWithResponse call
func ParseHeadBackplaneClusterClusterIdResponse(rsp *http.Response) (*HeadBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOptionsBackplaneClusterClusterIdResponse parses an HTTP response from a OptionsBackplaneClusterClusterIdWithResponse call
func ParseOptionsBackplaneClusterClusterIdResponse(rsp *http.Response) (*OptionsBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchBackplaneClusterClusterIdResponse parses an HTTP response from a PatchBackplaneClusterClusterIdWithResponse call
func ParsePatchBackplaneClusterClusterIdResponse(rsp *http.Response) (*PatchBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostBackplaneClusterClusterIdResponse parses an HTTP response from a PostBackplaneClusterClusterIdWithResponse call
func ParsePostBackplaneClusterClusterIdResponse(rsp *http.Response) (*PostBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutBackplaneClusterClusterIdResponse parses an HTTP response from a PutBackplaneClusterClusterIdWithResponse call
func ParsePutBackplaneClusterClusterIdResponse(rsp *http.Response) (*PutBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTraceBackplaneClusterClusterIdResponse parses an HTTP response from a TraceBackplaneClusterClusterIdWithResponse call
func ParseTraceBackplaneClusterClusterIdResponse(rsp *http.Response) (*TraceBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TraceBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReportsByClusterResponse parses an HTTP response from a GetReportsByClusterWithResponse call
func ParseGetReportsByClusterResponse(rsp *http.Response) (*GetReportsByClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReportsByClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListReports
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateReportResponse parses an HTTP response from a CreateReportWithResponse call
func ParseCreateReportResponse(rsp *http.Response) (*CreateReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Report
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetReportByIdResponse parses an HTTP response from a GetReportByIdWithResponse call
func ParseGetReportByIdResponse(rsp *http.Response) (*GetReportByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReportByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Report
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLoginClusterResponse parses an HTTP response from a LoginClusterWithResponse call
func ParseLoginClusterResponse(rsp *http.Response) (*LoginClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteBackplaneRemediateClusterIdRemediationResponse parses an HTTP response from a DeleteBackplaneRemediateClusterIdRemediationWithResponse call
func ParseDeleteBackplaneRemediateClusterIdRemediationResponse(rsp *http.Response) (*DeleteBackplaneRemediateClusterIdRemediationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBackplaneRemediateClusterIdRemediationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBackplaneRemediateClusterIdRemediationResponse parses an HTTP response from a GetBackplaneRemediateClusterIdRemediationWithResponse call
func ParseGetBackplaneRemediateClusterIdRemediationResponse(rsp *http.Response) (*GetBackplaneRemediateClusterIdRemediationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackplaneRemediateClusterIdRemediationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseHeadBackplaneRemediateClusterIdRemediationResponse parses an HTTP response from a HeadBackplaneRemediateClusterIdRemediationWithResponse call
func ParseHeadBackplaneRemediateClusterIdRemediationResponse(rsp *http.Response) (*HeadBackplaneRemediateClusterIdRemediationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadBackplaneRemediateClusterIdRemediationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOptionsBackplaneRemediateClusterIdRemediationResponse parses an HTTP response from a OptionsBackplaneRemediateClusterIdRemediationWithResponse call
func ParseOptionsBackplaneRemediateClusterIdRemediationResponse(rsp *http.Response) (*OptionsBackplaneRemediateClusterIdRemediationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsBackplaneRemediateClusterIdRemediationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchBackplaneRemediateClusterIdRemediationResponse parses an HTTP response from a PatchBackplaneRemediateClusterIdRemediationWithResponse call
func ParsePatchBackplaneRemediateClusterIdRemediationResponse(rsp *http.Response) (*PatchBackplaneRemediateClusterIdRemediationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchBackplaneRemediateClusterIdRemediationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostBackplaneRemediateClusterIdRemediationResponse parses an HTTP response from a PostBackplaneRemediateClusterIdRemediationWithResponse call
func ParsePostBackplaneRemediateClusterIdRemediationResponse(rsp *http.Response) (*PostBackplaneRemediateClusterIdRemediationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBackplaneRemediateClusterIdRemediationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutBackplaneRemediateClusterIdRemediationResponse parses an HTTP response from a PutBackplaneRemediateClusterIdRemediationWithResponse call
func ParsePutBackplaneRemediateClusterIdRemediationResponse(rsp *http.Response) (*PutBackplaneRemediateClusterIdRemediationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBackplaneRemediateClusterIdRemediationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTraceBackplaneRemediateClusterIdRemediationResponse parses an HTTP response from a TraceBackplaneRemediateClusterIdRemediationWithResponse call
func ParseTraceBackplaneRemediateClusterIdRemediationResponse(rsp *http.Response) (*TraceBackplaneRemediateClusterIdRemediationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TraceBackplaneRemediateClusterIdRemediationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRemediationResponse parses an HTTP response from a DeleteRemediationWithResponse call
func ParseDeleteRemediationResponse(rsp *http.Response) (*DeleteRemediationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRemediationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateRemediationResponse parses an HTTP response from a CreateRemediationWithResponse call
func ParseCreateRemediationResponse(rsp *http.Response) (*CreateRemediationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRemediationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RemediationLoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetScriptsByClusterResponse parses an HTTP response from a GetScriptsByClusterWithResponse call
func ParseGetScriptsByClusterResponse(rsp *http.Response) (*GetScriptsByClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScriptsByClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scripts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllScriptsByClusterResponse parses an HTTP response from a GetAllScriptsByClusterWithResponse call
func ParseGetAllScriptsByClusterResponse(rsp *http.Response) (*GetAllScriptsByClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllScriptsByClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scripts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllJobsResponse parses an HTTP response from a GetAllJobsWithResponse call
func ParseGetAllJobsResponse(rsp *http.Response) (*GetAllJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateJobResponse parses an HTTP response from a CreateJobWithResponse call
func ParseCreateJobResponse(rsp *http.Response) (*CreateJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteJobResponse parses an HTTP response from a DeleteJobWithResponse call
func ParseDeleteJobResponse(rsp *http.Response) (*DeleteJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRunResponse parses an HTTP response from a GetRunWithResponse call
func ParseGetRunResponse(rsp *http.Response) (*GetRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobLogsResponse parses an HTTP response from a GetJobLogsWithResponse call
func ParseGetJobLogsResponse(rsp *http.Response) (*GetJobLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Logs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/octet-stream) unsupported

	}

	return response, nil
}

// ParseCreateTestScriptRunResponse parses an HTTP response from a CreateTestScriptRunWithResponse call
func ParseCreateTestScriptRunResponse(rsp *http.Response) (*CreateTestScriptRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTestScriptRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestJobResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTestScriptRunResponse parses an HTTP response from a GetTestScriptRunWithResponse call
func ParseGetTestScriptRunResponse(rsp *http.Response) (*GetTestScriptRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTestScriptRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestJobResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTestScriptRunLogsResponse parses an HTTP response from a GetTestScriptRunLogsWithResponse call
func ParseGetTestScriptRunLogsResponse(rsp *http.Response) (*GetTestScriptRunLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTestScriptRunLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Logs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/octet-stream) unsupported

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
